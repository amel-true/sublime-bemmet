{
  "name": "bemmet",
  "version": "1.5.1",
  "description": "Simple Emmet-like tool to expand abbreviations into BEMJSON",
  "keywords": [
    "bem",
    "bemjson",
    "snippets",
    "emmet"
  ],
  "main": "index.js",
  "scripts": {
    "test": "node test/test.js"
  },
  "author": {
    "name": "Vladimir Grinenko",
    "email": "i@tadatuta.com"
  },
  "license": "MPL-2.0",
  "dependencies": {
    "bem-naming": "^0.5.1",
    "stringify-object": "^2.3.0"
  },
  "readme": "# bemmet\n\nSimple Emmet-like tool to expand abbreviations into [BEMJSON](https://en.bem.info/technology/bemjson/).\nCheck out [online demo](http://tadatuta.github.io/bemmet/).\n\nAlso available as [Sublime Text](https://github.com/tadatuta/sublime-bemmet) and [Atom](https://atom.io/packages/atom-bemmet) plugins.\n\n## Usage\n```js\nvar bemmet = require('bemmet');\nvar bemjson = bemmet('b1>__e1*2>b3_theme_islands+_state_active{hello}'); // object\nvar bemjsonString = bemmet.stringify('b1>__e1*2>b3_theme_islands+_state_active{hello}');\n\nconsole.log(bemjsonString);\n// {\n//     block: 'b1',\n//     content: [\n//         {\n//             elem: 'e1',\n//             content: [\n//                 {\n//                     block: 'b3',\n//                     mods: { theme: 'islands' },\n//                     content: {}\n//                 },\n//                 {\n//                     block: 'b1',\n//                     mods: { state: 'active' },\n//                     content: 'hello'\n//                 }\n//             ]\n//         },\n//         {\n//             elem: 'e1',\n//             content: [\n//                 {\n//                     block: 'b3',\n//                     mods: { theme: 'islands' },\n//                     content: {}\n//                 },\n//                 {\n//                     block: 'b1',\n//                     mods: { state: 'active' },\n//                     content: 'hello'\n//                 }\n//             ]\n//         }\n//     ]\n// }\n```\n\n### Custom naming scheme\n```js\nvar bemmet = require('bemmet');\nvar abbreviation = 'b1>__e1*2>b3--islands+--active';\nvar bemjson = bemmet.stringify(abbreviation, {\n    naming: {\n        elem: '__',\n        mod: '--'\n    }\n});\n\nconsole.log(bemjson);\n// {\n//     block: 'b1',\n//     content: [\n//         {\n//             elem: 'e1',\n//             content: [\n//                 {\n//                     block: 'b3',\n//                     mods: { islands: true },\n//                     content: {}\n//                 },\n//                 {\n//                     block: 'b1',\n//                     mods: { active: true },\n//                     content: {}\n//                 }\n//             ]\n//         },\n//         {\n//             elem: 'e1',\n//             content: [\n//                 {\n//                     block: 'b3',\n//                     mods: { islands: true },\n//                     content: {}\n//                 },\n//                 {\n//                     block: 'b1',\n//                     mods: { active: true },\n//                     content: {}\n//                 }\n//             ]\n//         }\n//     ]\n// }\n```\n\n### API\n```js\nbemmet(abbreviation, [parentBlock], [options]); // object\nbemmet.stringify(abbreviation, [parentBlock], [options]); // string\n```\n`parentBlock` is used to explicitly define context for shortcuts like `__elem` when there's no parent block in abbreviation itself.\n\n`options.naming` is used to configure BEM naming scheme. For details please refer to [bem-naming](https://en.bem.info/tools/bem/bem-naming/).\n\nFor `stringify()` method it's possible to configure indentation and quotes via `options.indent` (string) and `options.singleQuotes` (boolean) params.\n",
  "readmeFilename": "README.md",
  "gitHead": "4147b907bee6b90df8659d416627016a0a65d256",
  "_id": "bemmet@1.5.1",
  "_shasum": "fbb6c1f95070f98ccbd8a56dc9b2339a843c01a8",
  "_from": "bemmet@>=1.5.1 <2.0.0"
}
